"""
Religion Demographics Processor

Handles religion demographic data processing, chart generation, and report formatting.
"""

from pathlib import Path
from .base import BaseDemographicsProcessor, BaseReportFormatter
from ..models import MunicipalityWideReligionPopulation, ReligionTypeChoice
from ..utils.svg_chart_generator import RELIGION_COLORS
from apps.reports.utils.nepali_numbers import (
    format_nepali_number,
    format_nepali_percentage,
)
from apps.chart_management.processors import SimpleChartProcessor


class ReligionProcessor(BaseDemographicsProcessor, SimpleChartProcessor):
    """Processor for religion demographics"""

    def __init__(self):
        super().__init__()
        SimpleChartProcessor.__init__(self)

        # Ensure we use the same directory as the chart service
        from django.conf import settings

        if hasattr(settings, "STATICFILES_DIRS") and settings.STATICFILES_DIRS:
            # Use same directory as chart management service
            self.static_charts_dir = (
                Path(settings.STATICFILES_DIRS[0]) / "images" / "charts"
            )
        else:
            # Fallback to STATIC_ROOT
            self.static_charts_dir = Path(settings.STATIC_ROOT) / "images" / "charts"

        self.static_charts_dir.mkdir(parents=True, exist_ok=True)

        # Customize chart dimensions for religion
        self.pie_chart_width = 900
        self.pie_chart_height = 450
        self.chart_radius = 130
        # Set religion-specific colors
        self.chart_generator.colors = RELIGION_COLORS

    def get_chart_key(self):
        """Return unique chart key for this processor"""
        return "demographics_religion"

    def get_section_title(self):
        return "‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£"

    def get_section_number(self):
        return "‡•©.‡•´"

    def get_data(self):
        """Get religion population data"""
        religion_data = {}

        # Initialize all religions
        for choice in ReligionTypeChoice.choices:
            religion_data[choice[0]] = {
                "population": 0,
                "percentage": 0.0,
                "name_nepali": choice[1],
            }

        # Get actual data from database
        total_population = 0
        for religion_obj in MunicipalityWideReligionPopulation.objects.all():
            religion = religion_obj.religion  # Correct attribute based on models.py
            if religion in religion_data:
                religion_data[religion]["population"] += religion_obj.population
                total_population += religion_obj.population

        # Calculate percentages
        if total_population > 0:
            for religion, data in religion_data.items():
                data["percentage"] = round(
                    (data["population"] / total_population) * 100, 2
                )

        # Sort by religion key for consistent ordering (important for caching)
        return dict(sorted(religion_data.items()))

    def generate_report_content(self, data):
        """Generate religion-specific report content"""
        formatter = self.ReligionReportFormatter()
        return formatter.generate_formal_report(data)

    def generate_chart_svg(self, data, chart_type="pie"):
        """Generate religion chart SVG using SVGChartGenerator"""
        if chart_type == "pie":
            return self.chart_generator.generate_pie_chart_svg(
                data,
                include_title=False,
                title_nepali="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
                title_english="Population Distribution by Religion",
            )
        elif chart_type == "bar":
            return self.chart_generator.generate_bar_chart_svg(
                data,
                include_title=False,
                title_nepali="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
                title_english="Population Distribution by Religion",
            )
        return None

    def generate_and_track_charts(self, data):
        """Generate charts only if they don't exist and track them using simplified chart management"""
        charts = {}

        # Ensure static charts directory exists
        self.static_charts_dir.mkdir(parents=True, exist_ok=True)

        # Check and generate pie chart only if needed
        if self.needs_generation("pie"):
            print("üé® Generating pie chart (file doesn't exist)...")
            success_pie, png_path_pie, svg_path_pie = (
                self.chart_generator.generate_chart_image(
                    demographic_data=data,
                    output_name="religion_pie_chart",
                    static_dir=str(self.static_charts_dir),
                    chart_type="pie",
                    include_title=False,
                    title_nepali="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
                    title_english="Population Distribution by Religion",
                )
            )

            if success_pie and png_path_pie:
                pie_file_path = "religion_pie_chart.png"
                print(f"‚úì Generated high-quality pie chart: {png_path_pie}")

                # Track with simplified chart management system
                pie_url = self.track_chart_file(
                    chart_type="pie",
                    file_path=pie_file_path,
                    title="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£ (‡§™‡§æ‡§à ‡§ö‡§æ‡§∞‡•ç‡§ü)",
                )
                if pie_url:
                    charts["pie_chart_url"] = pie_url
                    charts["pie_chart_png"] = pie_file_path
                    print(f"‚úì Pie chart URL: {pie_url}")

            elif svg_path_pie:
                pie_file_path = "religion_pie_chart.svg"
                print(f"‚ö† Using SVG fallback for pie chart: {svg_path_pie}")

                pie_url = self.track_chart_file(
                    chart_type="pie",
                    file_path=pie_file_path,
                    title="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£ (‡§™‡§æ‡§à ‡§ö‡§æ‡§∞‡•ç‡§ü)",
                )
                if pie_url:
                    charts["pie_chart_url"] = pie_url
                    charts["pie_chart_svg"] = pie_file_path
            else:
                print("‚ùå Failed to generate pie chart")
        else:
            # Use existing pie chart
            pie_url = self.get_chart_url("pie")
            if pie_url:
                charts["pie_chart_url"] = pie_url
                print("‚úì Using existing pie chart")

        # Check and generate bar chart only if needed
        if self.needs_generation("bar"):
            print("üé® Generating bar chart (file doesn't exist)...")
            success_bar, png_path_bar, svg_path_bar = (
                self.chart_generator.generate_chart_image(
                    demographic_data=data,
                    output_name="religion_bar_chart",
                    static_dir=str(self.static_charts_dir),
                    chart_type="bar",
                    include_title=False,
                    title_nepali="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
                    title_english="Population Distribution by Religion",
                )
            )

            if success_bar and png_path_bar:
                bar_file_path = "religion_bar_chart.png"
                print(f"‚úì Generated high-quality bar chart: {png_path_bar}")

                # Track with simplified chart management system
                bar_url = self.track_chart_file(
                    chart_type="bar",
                    file_path=bar_file_path,
                    title="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£ (‡§¨‡§æ‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ü)",
                )
                if bar_url:
                    charts["bar_chart_url"] = bar_url
                    charts["bar_chart_png"] = bar_file_path
                    print(f"‚úì Bar chart URL: {bar_url}")

            elif svg_path_bar:
                bar_file_path = "religion_bar_chart.svg"
                print(f"‚ö† Using SVG fallback for bar chart: {svg_path_bar}")

                bar_url = self.track_chart_file(
                    chart_type="bar",
                    file_path=bar_file_path,
                    title="‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§§‡§∞‡§£ (‡§¨‡§æ‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ü)",
                )
                if bar_url:
                    charts["bar_chart_url"] = bar_url
                    charts["bar_chart_svg"] = bar_file_path
            else:
                print("‚ùå Failed to generate bar chart")
        else:
            # Use existing bar chart
            bar_url = self.get_chart_url("bar")
            if bar_url:
                charts["bar_chart_url"] = bar_url
        return charts

    def process_for_pdf(self):
        """Process religion data for PDF generation with simplified chart management"""
        # Get raw data
        data = self.get_data()

        # Generate report content
        report_content = self.generate_report_content(data)

        # Generate charts only if needed
        charts = self.generate_and_track_charts(data)

        # Calculate total population
        total_population = sum(
            item["population"]
            for item in data.values()
            if isinstance(item, dict) and "population" in item
        )

        return {
            "data": data,
            "report_content": report_content,
            "charts": charts,
            "total_population": total_population,
            "section_title": self.get_section_title(),
            "section_number": self.get_section_number(),
        }

    class ReligionReportFormatter(BaseReportFormatter):
        """Religion-specific report formatter"""

        def generate_formal_report(self, religion_data):
            """Generate religion formal report content"""
            total_population = sum(
                data["population"] for data in religion_data.values()
            )

            # Find major religions
            major_religions = []
            for religion_type, data in religion_data.items():
                if data["population"] > 0:
                    major_religions.append(
                        (data["name_nepali"], data["population"], data["percentage"])
                    )

            major_religions.sort(key=lambda x: x[1], reverse=True)

            # Build content based on provided text
            content = []

            # Constitutional and historical context
            content.append(
                """‡§®‡•á‡§™‡§æ‡§≤‡§Æ‡§æ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§§‡§æ ‡§∞ ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ ‡•§ ‡§Ö‡§ù‡•à ‡§µ‡§ø‡§ß‡§ø‡§µ‡§§ ‡§∞‡•Å‡§™‡§Æ‡§æ ‡§®‡•á‡§™‡§æ‡§≤‡§ï‡•ã ‡§Ö‡§®‡•ç‡§§‡§∞‡§ø‡§Æ ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§® ‡•®‡•¶‡•¨‡•©, ‡§≤‡•á ‡§Æ‡§ø‡§§‡§ø ‡•®‡•¶‡•¨‡•© ‡§ú‡•á‡§† ‡•™ ‡§Æ‡§æ ‡§™‡•Å‡§∞‡•ç‡§®‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§∏‡§Ç‡§∏‡§¶‡§ï‡•ã ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§ò‡•ã‡§∑‡§£‡§æ‡§≤‡•á ‡§®‡•á‡§™‡§æ‡§≤‡§≤‡§æ‡§à ‡§è‡§ï ‡§ß‡§∞‡•ç‡§Æ ‡§®‡§ø‡§∞‡§™‡•á‡§ï‡•ç‡§∑ ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§ï‡•ã ‡§∞‡•Å‡§™‡§Æ‡§æ ‡§ò‡•ã‡§∑‡§£‡§æ ‡§ó‡§∞‡•ç‡§Ø‡•ã ‡•§ ‡§§‡•ç‡§Ø‡§∏‡•ç‡§§‡•à ‡§®‡•á‡§™‡§æ‡§≤‡§ï‡•ã ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§®, ‡•®‡•¶‡•≠‡•® ‡§ï‡•ã ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡§æ‡§µ‡§®‡§æ‡§Æ‡§æ ‡§®‡•á‡§™‡§æ‡§≤‡§≤‡§æ‡§à ‡§è‡§ï ‡§¨‡§π‡•Å‡§ú‡§æ‡§§‡•Ä‡§Ø, ‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡§ø‡§ï, ‡§¨‡§π‡•Å‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï, ‡§¨‡§π‡•Å‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§§‡§•‡§æ ‡§≠‡•å‡§ó‡•ã‡§≤‡§ø‡§ï ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§≤‡§æ‡§à ‡§Ü‡§§‡•ç‡§Æ‡§∏‡§æ‡§§‡•ç ‡§ó‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§¨‡§ø‡§ö‡§ï‡•ã ‡§è‡§ï‡§§‡§æ, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ê‡§ï‡•ç‡§Ø‡§¨‡§¶‡•ç‡§ß‡§§‡§æ, ‡§∏‡§π‡§ø‡§∑‡•ç‡§£‡•Å‡§§‡§æ ‡§∞ ‡§∏‡§¶‡•ç‡§≠‡§æ‡§µ‡§≤‡§æ‡§à ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§è‡§µ‡§Ç ‡§™‡•ç‡§∞‡§µ‡§∞‡•ç‡§ß‡§® ‡§ó‡§∞‡•ç‡§¶‡•à, ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§Ø, ‡§ú‡§æ‡§§‡•Ä‡§Ø, ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø, ‡§≠‡§æ‡§∑‡§ø‡§ï, ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï, ‡§≤‡•à‡§ô‡•ç‡§ó‡§ø‡§ï ‡§µ‡§ø‡§≠‡•á‡§¶ ‡§∞ ‡§∏‡§¨‡•à ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§ï‡§æ ‡§ú‡§æ‡§§‡•Ä‡§Ø ‡§õ‡•Å‡§µ‡§æ‡§õ‡•Ç‡§§‡§ï‡•ã ‡§Ö‡§®‡•ç‡§§‡•ç‡§Ø ‡§ó‡§∞‡•Ä ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ, ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø ‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§Æ‡§æ‡§®‡•Å‡§™‡§æ‡§§‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡•Ä ‡§∞ ‡§∏‡§π‡§≠‡§æ‡§ó‡§ø‡§§‡§æ‡§Æ‡•Ç‡§≤‡§ï ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§®‡•ç‡§§‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§∏‡§Æ‡§§‡§æ‡§Æ‡•Ç‡§≤‡§ï ‡§∏‡§Æ‡§æ‡§ú‡§ï‡•ã ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ó‡§∞‡•ç‡§®‡•á ‡§∏‡§Ç‡§ï‡§≤‡•ç‡§™ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ó‡§∞‡§ø‡§è‡§ï‡•ã ‡§õ ‡•§ ‡§´‡§≤‡§∏‡•ç‡§µ‡§∞‡•Å‡§™ ‡§®‡•á‡§™‡§æ‡§≤‡§Æ‡§æ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§§‡§æ ‡§∞ ‡§∏‡•å‡§π‡§æ‡§∞‡•ç‡§¶‡§§‡§æ ‡§∞‡§π‡•á‡§ï‡•ã ‡§™‡§æ‡§à‡§®‡•ç‡§õ ‡•§"""
            )

            # Festivals and cultural practices
            content.append(
                """‡§Ø‡§π‡§æ‡§Å ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ï‡§æ ‡§Æ‡§æ‡§®‡§ø‡§∏‡§π‡§∞‡•Ç‡§ï‡•ã ‡§¨‡§∏‡•ã‡§¨‡§æ‡§∏ ‡§∞‡§π‡•á‡§ï‡•ã ‡§π‡•Å‡§®‡§æ‡§≤‡•á ‡§â‡§®‡•Ä‡§π‡§∞‡•Ç‡§ï‡§æ ‡§Ü‚Äì‡§Ü‡§´‡•ç‡§®‡•à ‡§ö‡§æ‡§°‡§™‡§∞‡•ç‡§µ‡§π‡§∞‡•Ç ‡§õ‡§®‡•ç ‡•§ ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§¨‡§æ‡§∏‡•Ä‡§≤‡•á ‡§¶‡§∂‡•à‡§Å, ‡§§‡§ø‡§π‡§æ‡§∞, ‡§§‡§ø‡§ú, ‡§≤‡•ç‡§π‡•ã‡§∏‡§æ‡§∞, ‡§Æ‡§æ‡§ò‡•á ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§æ‡§®‡•ç‡§§‡§ø, ‡§´‡§æ‡§ó‡•Å ‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Æ‡§æ, ‡§ö‡§£‡•ç‡§°‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Æ‡§æ, ‡§ú‡§®‡•à‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Æ‡§æ, ‡§¨‡•Å‡§¶‡•ç‡§ß ‡§ú‡§Ø‡§®‡•ç‡§§‡•Ä, ‡§ï‡•ç‡§∞‡§ø‡§∏‡§Æ‡§∏ ‡§™‡§∞‡•ç‡§µ ‡§Ü‡§¶‡§ø ‡§Æ‡§®‡§æ‡§â‡§®‡•á ‡§ó‡§∞‡•ç‡§¶‡§õ‡§®‡•ç ‡•§"""
            )

            # Population statistics
            nepali_total = format_nepali_number(total_population)
            if major_religions:
                # Get Hindu percentage (assuming it's the major religion)
                hindu_data = next((r for r in major_religions if "‡§π‡§ø‡§®‡•ç‡§¶‡•Å" in r[0]), None)
                buddhist_data = next(
                    (r for r in major_religions if "‡§¨‡•å‡§¶‡•ç‡§ß" in r[0]), None
                )
                kirant_data = next(
                    (r for r in major_religions if "‡§ï‡§ø‡§∞‡§æ‡§Å‡§§" in r[0]), None
                )
                christian_data = next(
                    (
                        r
                        for r in major_religions
                        if "‡§ï‡•ç‡§∞‡§ø‡§∂‡•ç‡§ö‡§ø‡§Ø‡§®" in r[0] or "‡§à‡§∏‡§æ‡§à" in r[0]
                    ),
                    None,
                )

                stats_text = f"""‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∞‡§π‡•á‡§ï‡§æ ‡§ï‡•Å‡§≤ {nepali_total} ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§Æ‡§ß‡•ç‡§Ø‡•á"""

                if hindu_data:
                    hindu_pop = format_nepali_number(hindu_data[1])
                    hindu_pct = format_nepali_percentage(hindu_data[2])
                    stats_text += f""" {hindu_pop} ‡§Ö‡§∞‡•ç‡§•‡§æ‡§§ {hindu_pct} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§≤‡•á ‡§π‡§ø‡§®‡•ç‡§¶‡•Å ‡§ß‡§∞‡•ç‡§Æ ‡§Æ‡§æ‡§®‡•ç‡§¶‡§õ‡§®‡•ç"""

                if buddhist_data:
                    buddhist_pop = format_nepali_number(buddhist_data[1])
                    buddhist_pct = format_nepali_percentage(buddhist_data[2])
                    stats_text += f""" ‡§≠‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§∞‡•ã‡§Æ‡§æ ‡§¨‡•å‡§¶‡•ç‡§ß ‡§ß‡§∞‡•ç‡§Æ ‡§Æ‡§æ‡§®‡•ç‡§®‡•á‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ {buddhist_pop} ‡§Ö‡§∞‡•ç‡§•‡§æ‡§§ {buddhist_pct} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç ‡•§"""

                other_religions = []
                if kirant_data:
                    kirant_pop = format_nepali_number(kirant_data[1])
                    kirant_pct = format_nepali_percentage(kirant_data[2])
                    other_religions.append(
                        f"""{kirant_pop} ‡§Ö‡§∞‡•ç‡§•‡§æ‡§§ {kirant_pct} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§ï‡§ø‡§∞‡§æ‡§Å‡§§"""
                    )

                if christian_data:
                    christian_pct = format_nepali_percentage(christian_data[2])
                    other_religions.append(f"""‡§ï‡•ç‡§∞‡§ø‡§∂‡•ç‡§ö‡§ø‡§Ø‡§® {christian_pct} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§""")

                if other_religions:
                    stats_text += (
                        f""" ‡§§‡•ç‡§Ø‡§∏‡•à‡§ó‡§∞‡•Ä {' ‡§≠‡§®‡•á '.join(other_religions)} ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç ‡•§"""
                    )

                content.append(stats_text)

            # Religious diversity and tolerance
            content.append(
                """‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§∞‡§π‡•á‡§§‡§æ ‡§™‡§®‡§ø ‡§π‡§ø‡§®‡•ç‡§¶‡•Å ‡§∞ ‡§¨‡•å‡§¶‡•ç‡§ß ‡§ß‡§∞‡•ç‡§Æ‡§æ‡§µ‡§≤‡§Æ‡•ç‡§¨‡•Ä‡§π‡§∞‡•Ç‡§ï‡•ã ‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§§‡§æ ‡§∞‡§π‡•á‡§ï‡•ã ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï‡§≤‡•á ‡§¶‡•á‡§ñ‡§æ‡§â‡§Å‡§õ ‡•§ ‡§®‡•á‡§™‡§æ‡§≤‡§Æ‡§æ ‡§∏‡§¶‡§ø‡§Ø‡•å‡§Ç‡§¶‡•á‡§ñ‡§ø ‡§∞‡§π‡§ø ‡§Ü‡§è‡§ï‡•ã ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡§π‡§ø‡§∑‡•ç‡§£‡•Å‡§§‡§æ ‡§Ø‡§∏ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§™‡§®‡§ø ‡§ï‡§æ‡§Ø‡§Æ‡•à ‡§∞‡§π‡•á‡§ï‡•ã ‡§¶‡•á‡§ñ‡§ø‡§®‡•ç‡§õ ‡•§"""
            )

            return " ".join(content)
