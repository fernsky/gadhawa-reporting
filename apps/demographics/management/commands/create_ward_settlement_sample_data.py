"""
Management command to create ward settlement data
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.demographics.models import WardSettlement
import uuid


class Command(BaseCommand):
    help = (
        "Create ward settlement data based on actual municipality ward settlement data"
    )

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="Clear existing data before creating new data",
        )

    def handle(self, *args, **options):
        if options["clear"]:
            self.stdout.write(
                self.style.WARNING("Clearing existing ward settlement data...")
            )
            WardSettlement.objects.all().delete()

        self.stdout.write(
            "Creating ward settlement data based on actual municipality data..."
        )

        # Ward settlement data as provided
        ward_settlement_data = [
            {
                "ward_number": 1,
                "settlement_areas": [
                    "‡§™‡§æ‡§ô",
                    "‡§ê‡§™‡•á",
                    "‡§õ‡§ø‡§â‡§¶‡§∞",
                    "‡§Æ‡§æ‡§¶‡•ç‡§¶‡§∞",
                    "‡§∞‡§æ‡§ú‡§ø‡§¨‡§æ‡§ô",
                    "‡§¶‡§æ‡§à‡§¨‡§æ‡§ô",
                    "‡§õ‡§ø‡§â‡§¶‡§∞",
                    "‡§ñ‡§¶‡•ç‡§¶‡§∞",
                    "‡§ï‡§æ‡§®‡§æ‡§ï‡•Å‡§§‡•Å‡§ô",
                ],
            },
            {
                "ward_number": 2,
                "settlement_areas": [
                    "‡§ñ‡§æ‡§≤‡§æ‡§µ‡§∏‡•ç‡§§‡•Ä",
                    "‡§°‡§æ‡§Å‡§°‡§æ ‡§ü‡•ã‡§≤",
                    "‡§Ü‡§∞‡•ç‡§Ø‡§ü‡•ã‡§≤",
                    "‡§Æ‡•Ç‡§ñ‡§ø‡§Ø‡§æ ‡§ü‡•ã‡§≤",
                    "‡§ú‡•ã‡§ó‡•Ä‡§•‡§∞‡§Ø‡§§‡§ï‡§æ ‡§¨‡§∏‡•ç‡§§‡•Ä",
                    "‡§∏‡§æ‡§∞‡•ç‡§ï‡§ø ‡§ü‡•ã‡§≤",
                    "‡§∏‡§ø‡§Æ ‡§≠‡§û‡•ç‡§®‡•ç‡§Ø‡§æ‡§ô",
                    "‡§ö‡§ø‡§™‡•ç‡§≤‡•á‡§™‡§æ‡§ü‡§æ",
                    "‡§§‡§æ‡§∏‡§ø‡§¨‡§æ‡§ô",
                    "‡§•‡§æ‡§§‡§ß‡•Å‡§ô‡•ç‡§ó‡§æ",
                    "‡§∏‡§≤‡•ç‡§≤‡•á‡§ß‡•Å‡§Æ",
                ],
            },
            {
                "ward_number": 3,
                "settlement_areas": [
                    "‡§ú‡•Å‡§§‡•Å‡§ô‡§ñ‡•ã‡§≤‡§æ",
                    "‡§∏‡§ø‡§Æ ‡§§‡•ã‡§≤ ‡§∏‡§ø‡§Æ‡•á‡§ó‡§ø‡§•‡§æ",
                    "‡§∏‡§ø‡§Æ‡§≤‡•á‡§®‡•Ä",
                    "‡§Ö‡§∞‡§ø‡§®‡•ç‡§¶‡•á",
                    "‡§ó‡•å‡§°‡§æ",
                    "‡§ö‡§ø‡§â‡§∞‡§™‡§æ‡§ñ‡§æ",
                    "‡§ú‡§ø‡§Æ‡§æ‡§≤ ‡§§‡•ã‡§≤",
                    "‡§§‡§æ‡§≤‡§™‡•ã‡§ñ‡§∞‡•Ä",
                    "‡§¶‡•á‡§â‡§∞‡§æ‡§≤‡§ø",
                    "‡§ß‡§®‡§ø‡§™‡§æ‡§ñ‡§æ",
                    "‡§ß‡§®‡•á‡§ñ‡§∞‡•ç‡§ï",
                    "‡§∏‡§ø‡§Æ‡•á‡§ó‡§ø‡§•‡§æ",
                ],
            },
            {
                "ward_number": 4,
                "settlement_areas": [
                    "‡§®‡§Æ‡•ç‡§ú‡§æ",
                    "‡§Ö‡§≤‡§ß‡§æ‡§∞‡§æ",
                    "‡§â‡§§‡§ø‡§∏‡•á",
                    "‡§ó‡•å‡§¶‡§æ",
                    "‡§ö‡§æ‡§ñ‡•Å‡§∞‡•á ‡§ß‡§æ‡§∞‡§æ",
                    "‡§ú‡•Å‡§∞‡§¶‡•Å‡§ô‡§ó‡§æ",
                    "‡§ú‡•å‡§®‡•á ‡§™‡§æ‡§®‡•Ä",
                    "‡§ù‡§æ‡§ï‡•ç‡§∞‡•Ä‡§∏‡§≤‡•ç‡§≤‡§æ",
                    "‡§•‡§≤‡§¨‡§æ‡§ô",
                    "‡§¶‡§Æ‡§æ‡§¶‡•Å‡§ô‡§ó‡§æ",
                    "‡§•‡§æ‡§Æ",
                    "‡§∏‡§ø‡§Æ‡§ñ‡•ã‡§≤‡§æ",
                    "‡§∞‡§æ‡§∏‡•ç‡§•‡§∞",
                    "‡§∞‡§Æ‡§ø‡§®‡§ø",
                    "‡§¨‡§ø‡§∏‡•ç‡§®‡§æ ‡§ñ‡§∞‡•ç‡§ï",
                    "‡§™‡•Å‡§∞‡•ç‡§®‡§æ ‡§ó‡§æ‡§â‡§Å",
                ],
            },
            {
                "ward_number": 5,
                "settlement_areas": [
                    "‡§™‡§ø‡§™‡§≤‡§ö‡•å‡§∞",
                    "‡§Ö‡§Æ‡§ø‡§≤‡•á‡§ñ‡§∞‡•ç‡§ï",
                    "‡§á‡§ú‡§æ‡§∞‡§æ",
                    "‡§ï‡§ø‡§≤‡§æ‡§ö‡•å‡§∞",
                    "‡§ó‡§æ‡§â‡§Å ‡§ü‡•ã‡§≤",
                    "‡§ó‡•ã‡§†‡§ø‡§¨‡§æ‡§ô",
                    "‡§ò‡•ã‡§™‡•Ä",
                    "‡§ó‡•ã‡§•‡•á‡§ñ‡§∞‡•ç‡§ï",
                    "‡§ö‡•ã‡§¨‡§æ‡§ô",
                    "‡§ò‡•ã‡§™‡•Ä",
                    "‡§ú‡•Å‡§ó‡•á‡§™‡§æ‡§®‡•Ä",
                    "‡§§‡§æ‡§Æ‡•ã‡§ñ‡•ã‡§≤‡§æ",
                    "‡§¶‡§Ç‡§ó‡§™‡§®‡•á",
                    "‡§¨‡§≤‡§æ‡§≤‡•á",
                    "‡§Æ‡§õ‡§§‡•Ä",
                    "‡§∏‡§æ‡§≤‡§ò‡§æ‡§∞‡•Ä",
                ],
            },
            {
                "ward_number": 6,
                "settlement_areas": [
                    "‡§®‡§æ‡§Æ‡•ç‡§ó‡•Ä ‡§¨‡§∏‡•ç‡§§‡•Ä",
                    "‡§™‡§æ‡§§‡•á ‡§ó‡•Å‡§Æ‡•ç‡§ö‡§æ‡§≤‡§ï‡•ã ‡§≤‡§∞‡§µ‡§æ‡§ô",
                    "‡§ï‡§Æ‡§∞‡•á‡§™‡§æ‡§®‡•Ä",
                    "‡§§‡§≤‡•ç‡§≤‡•ã ‡§ó‡•Å‡§Æ‡•ç‡§ö‡§æ‡§≤",
                    "‡§â‡§™‡§≤‡•ç‡§≤‡•ã ‡§•‡•ã‡§ï",
                    "‡§ò‡•ã‡§™‡•ç‡§§‡•á‡§ö‡•ã‡§∞",
                    "‡§§‡§≤‡•ã‡§•‡•ã‡§ï",
                    "‡§¶‡§ø‡§Æ‡§∏",
                    "‡§¶‡•Å‡§≤‡•ç‡§ß‡§∞‡§æ",
                    "‡§™‡§æ‡§§‡•á ‡§ó‡•Å‡§Æ‡•ç‡§ö‡§æ‡§≤",
                    "‡§™‡•ã‡§ñ‡§∞‡§æ",
                    "‡§∞‡§æ‡§ú‡§ø‡§™‡§æ‡§§‡•Ä",
                    "‡§¨‡•á‡§∞‡§ø",
                    "‡§¶‡§ø‡§Æ‡§∏",
                    "‡§ú‡§≤‡•ç‡§ï‡§ø‡§®‡•Ä",
                ],
            },
            {
                "ward_number": 7,
                "settlement_areas": [
                    "‡§™‡§≤‡•ç‡§≤‡•Ä‡§¨‡§®",
                    "‡§≠‡•Å‡§Æ‡•á‡§•‡§æ‡§®",
                    "‡§ù‡§∞‡•Ä‡§¨‡§æ‡§ô",
                    "‡§≠‡•Å‡§™‡•á‡§®‡•ç‡§¶‡•ç‡§∞ ‡§∏‡•ç‡§Æ‡•É‡§§‡§ø ‡§ü‡•ã‡§≤",
                    "‡§ñ‡•ã‡§≤‡§æ‡§™‡§æ‡§∞ ‡§ü‡•ã‡§≤",
                    "‡§õ‡§π‡§∞‡•á‡§ñ‡•Å‡§ô‡•ç‡§ó",
                    "‡§ó‡§π‡§ø‡§∞‡§æ ‡§ü‡•ã‡§≤",
                    "‡§≠‡•Å‡§Æ‡•á‡§•‡§æ‡§≤‡§æ ‡§ü‡•ã‡§≤",
                    "‡§ú‡•á‡§ô‡•ç‡§ñ‡•Å‡§ô",
                    "‡§ï‡•ç‡§µ‡§æ‡§ö‡§ø‡§¨‡§æ‡§ô ‡§ü‡•ã‡§≤",
                ],
            },
        ]

        existing_count = WardSettlement.objects.count()
        if existing_count > 0 and not options["clear"]:
            self.stdout.write(
                self.style.WARNING(
                    f"Found {existing_count} existing records. Use --clear to replace them."
                )
            )
            return

        created_count = 0
        updated_count = 0
        total_settlements = 0

        with transaction.atomic():
            for data in ward_settlement_data:
                obj, created = WardSettlement.objects.get_or_create(
                    ward_number=data["ward_number"],
                    defaults={
                        "settlement_areas": data["settlement_areas"],
                    },
                )

                if created:
                    created_count += 1
                    self.stdout.write(
                        f"‚úì Created Ward {data['ward_number']} with {len(data['settlement_areas'])} settlements"
                    )
                else:
                    # Update existing record
                    obj.settlement_areas = data["settlement_areas"]
                    obj.save()
                    updated_count += 1
                    self.stdout.write(
                        f"‚Üª Updated Ward {data['ward_number']} with {len(data['settlement_areas'])} settlements"
                    )

                total_settlements += len(data["settlement_areas"])

        total_records = WardSettlement.objects.count()

        self.stdout.write(
            self.style.SUCCESS(
                f"\nSuccessfully processed {len(ward_settlement_data)} ward settlement records "
                f"({created_count} new, {updated_count} updated)\n"
                f"Total records in database: {total_records}\n"
                f"Total settlements covered: {total_settlements} settlements across {len(ward_settlement_data)} wards"
            )
        )

        # Show breakdown by ward
        self.stdout.write("\nWard-wise settlement breakdown:")
        for ward_settlement in WardSettlement.objects.all().order_by("ward_number"):
            settlement_count = (
                len(ward_settlement.settlement_areas)
                if ward_settlement.settlement_areas
                else 0
            )
            self.stdout.write(
                f"  ‡§µ‡§°‡§æ {ward_settlement.ward_number}: {settlement_count} ‡§¨‡§∏‡•ç‡§§‡•Ä‡§π‡§∞‡•Å"
            )

        self.stdout.write(
            self.style.SUCCESS(
                f"\nüèòÔ∏è  Ward Settlement data creation completed successfully!"
            )
        )
